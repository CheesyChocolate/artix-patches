#!/bin/bash

# dependencies: artools-pkg, nvim (with Magit plugin), git.

# Get updates from Arch repo

# Check for updates using "artix-checkupdates -fu".
# The command outputs a list of packages that need updating.
# The first line is empty, the second line provides column headers,
# and from the third line, package update information is displayed.

# If no updates are found, exit the program with a message.
# If updates are found, extract the package names from the output.

# Import changes from Arch

# Clone the package repository using "artixpkg git clone <packagename>"
# to get any potential changes from the Artix Git repository.

# Use "artixpkg repo import <packagename>" to import changes from the Arch repo.
# The diff will be displayed on the terminal.

# Display the diff with options: accept, undo, skip, edit(a,u,s,e)
# 1. accept: Add the changes to the Artix repo using
#    "artixpkg repo add -p world <packagename>" and move on to the next package.
# 2. undo: Reset changes by executing
#    "cd ~/Templates/artools-workspace/artixlinux/<packagename> && git reset --hard HEAD"
#    and continue to the next package.
# 3. skip: Skip this package and move on to the next one without pushing changes to the Artix repo.
# 4. edit: Edit the changes using "nvim -c MagitOnly ~/Templates/artools-workspace/artixlinux/<packagename>".
#    After editing, prompt for options: accept, undo, skip, edit(a,u,s,e) again.

# TODO: add a flag to only print list of pending updates without processing them.

# Define workspace directory and package tree
WORKSPACE_DIR="${HOME}/Templates/artools-workspace"
PACKAGE_TREE="${WORKSPACE_DIR}/artixlinux"

# Get updates from Arch repo
updates=$(artix-checkupdates -fu | awk 'NR>2')

# Check if there are updates
if [ -z "$updates" ]; then
	echo "No updates found. Exiting."
	exit 0
fi

packageBasenames=$(echo "$updates" | awk '{print $1}')

# TODO: use `artix-rebuild-order` instead.
# remve extra packages that artix-rebuild-order gives and we don't maintain
libs=''
otherPackages=''

# get lib packages
# `lib*` and `lib32-lib*` but not `lib32-*`
for package in $packageBasenames; do
	if [[ $package == lib* ]] && [[ $package != lib32-* ]]; then
		libs+="$package "
	elif [[ $package == lib32-lib* ]]; then
		libs+="$package "
	else
		otherPackages+="$package "
	fi
done

# add lib packages to the beginning of the other packages
packageBasenames="$libs $otherPackages"

# Loop through each package and process updates
for package in $packageBasenames; do

    # get the repo name
    repo=$(echo "$updates" | grep -E "^${package} " | awk '{print $2}')

    echo "Processing updates for $package in $repo ..."

    # pull the latest changes from the Artix repo
    artixpkg git pull "$package"

    # Import changes from Arch repo and display the diff
    artixpkg repo import "$package"

    # apply patches if any exist
    if [ -d "${WORKSPACE_DIR}/artix-patches/${package}" ]; then
	    echo "Applying patches for $package ..."
	    cd "${PACKAGE_TREE}/${package}" || exit 1
	    git apply "${WORKSPACE_DIR}/artix-patches/${package}"/*.patch
	    git --no-pager diff
    fi

    while true; do
	    # Prompt for user action
	    read -p "Choose action: accept(a), undo(u), skip(s), edit(e): " action

	    case $action in
		    a | accept)
			    # Add changes to Artix repo
			    artixpkg repo add -p "$repo" "$package"
			    break
			    ;;
		    u | undo)
			    # Undo changes
			    (cd "${PACKAGE_TREE}/${package}" && git reset --hard HEAD)
			    break
			    ;;
		    s | skip)
			    # Skip this package
			    echo "Skipping $package."
			    break
			    ;;
		    e | edit)
			    # Edit changes
			    nvim -c MagitOnly "${PACKAGE_TREE}/${package}"
			    ;;
		    *)
			    echo "Invalid option. Please choose a valid option: accept(a), undo(u), skip(s), edit(e)."
			    ;;
	    esac
    done
done

echo "All updates processed."
exit 0
